import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:nb_utils/nb_utils.dart';
import 'package:purchases_flutter/purchases_flutter.dart';
import 'package:socialv/main.dart';
import 'package:socialv/models/pmp_models/membership_model.dart';
import 'package:socialv/network/pmp_repositry.dart';
import 'package:socialv/screens/dashboard_screen.dart';
import 'package:socialv/screens/membership/screens/pmp_order_detail_screen.dart';
import 'package:socialv/utils/common.dart';

class InAppPurchase {
  static String apiKey = "";
  static String subscriptionExpirationDate = "";
  static String getOfferStartedLog = "*-*-*-*-*-*-*-*-*-*-*-*- Get Offers Started *-*-*-*-*-*-*-*-*-*-*-*-";
  static String offerErrorsLog = "*-*-*-*-*-*-*-*-*-*-*-*- Error while getting offers *-*-*-*-*-*-*-*-*-*-*-*-";
  static String offersCompletedLog = "*-*-*-*-*-*-*-*-*-*-*-*- Get Offers Completed *-*-*-*-*-*-*-*-*-*-*-*-";
  static String upgradingPlanLog = "*-*-*-*-*-*-*-*-*-*-*-*- Upgrading New Plan *-*-*-*-*-*-*-*-*-*-*-*-";
  static String purchasingNewPlanLog = "*-*-*-*-*-*-*-*-*-*-*-*- Purchasing New Plan *-*-*-*-*-*-*-*-*-*-*-*-";
  static String subscriptionActivatedLog = "*-*-*-*-*-*-*-*-*-*-*-*- in-app subscription is Activated *-*-*-*-*-*-*-*-*-*-*-*-";
  static String subscriptionDeactivatedLog = "*-*-*-*-*-*-*-*-*-*-*-*- in-app subscription is Deactivated *-*-*-*-*-*-*-*-*-*-*-*-";

  static Future<void> init() async {
    /// set platform

    if (isIOS) {
      apiKey = appStore.inAppAppleApiKey;
    } else {
      apiKey = appStore.inAppGoogleApiKey;
    }

    /// configure Purchase SDK
    await configureSdk();
  }

  static Future<void> configureSdk() async {
    await Purchases.setLogLevel(LogLevel.debug);

    /// If User ID is not there then random Id will be generated by the Purchases SDK.
    PurchasesConfiguration configuration;
    configuration = PurchasesConfiguration(apiKey)
      ..appUserID = userStore.loginEmail
      ..observerMode = false;

    /// Start configuration
    await Purchases.configure(configuration).then((value) async {
      await Purchases.logIn(userStore.loginEmail).then((value) {
        /// check customerInfo
        checkInAppCustomerInfo();
      });
    });
  }

  /// use to get the offerings by stores
  static Future<Offerings?> getOfferings() async {
    log(getOfferStartedLog);
    Offerings? offerings;
    try {
      offerings = await Purchases.getOfferings();
    } on PlatformException catch (e) {
      log(offerErrorsLog);
      toast(e.message, print: true);
    }
    log(offersCompletedLog);
    return offerings;
  }

  /// purchase offer
  static Future<void> startPurchase(BuildContext context, {Package? selectedPackage, bool isFreeSubscription = false, required String levelId}) async {
    CustomerInfo customerInfo;
    if (isFreeSubscription == false) {
      if (appStore.inAppActiveSubscription.isNotEmpty) {
        log(upgradingPlanLog);
        customerInfo = await Purchases.purchasePackage(selectedPackage!, googleProductChangeInfo: GoogleProductChangeInfo(appStore.inAppActiveSubscription, prorationMode: GoogleProrationMode.immediateAndChargeProratedPrice)).catchError((e) {
          toast(e.message);
          if (e.code.toString() == "6") {
            checkInAppCustomerInfo().then((value) {
              DashboardScreen().launch(context, isNewTask: true);
            });
          }
          appStore.setLoading(false);
          return e;
        });
      } else {
        log(purchasingNewPlanLog);
        customerInfo = await Purchases.purchasePackage(selectedPackage!).catchError((e) {
          toast(e.message);
          if (e.code.toString() == "6") {
            checkInAppCustomerInfo().then((value) {
              DashboardScreen().launch(context, isNewTask: true);
            });
          }
          appStore.setLoading(false);
          return e;
        });
      }
      EntitlementInfo? entitlement = customerInfo.entitlements.all[appStore.inAppEntitlementID];
      log("entitlement==>${entitlement?.ownershipType.name}  is Active ==>  ${entitlement?.isActive}");
      if (customerInfo.entitlements.all[appStore.inAppEntitlementID] != null) subscriptionExpirationDate = customerInfo.entitlements.all[appStore.inAppEntitlementID]!.expirationDate.validate();
    }
    Map request = {
      "billing_amount": isFreeSubscription ? "0" : selectedPackage!.storeProduct.priceString,
      "gateway": "in_app_purchase",
      "payment_by": isAndroid ? "google_payment" : "apple_payment",
      "email": userStore.loginEmail,
      "contact": '',
      "meta_value": "",
      "level_id": levelId,
      "gateway_mode": isAndroid ? "Google" : "Apple",
      "is_active_subscription": true,
    };

    if (!isFreeSubscription) request.putIfAbsent("In_app_purchase_identifier", () => selectedPackage!.storeProduct.identifier);
    log('REQ: $request');

    /// generate order
    generateInAppOrder(context, request: request, levelId: levelId, isFreeSubscription: isFreeSubscription);
  }

  static Future<void> generateInAppOrder(BuildContext? context, {required Map request, bool isStartPurchase = true, String? levelId, bool isFreeSubscription = false}) async {
    await generateOrder(request).then((order) async {
      await getMembershipLevelForUser(userId: userStore.loginUserId.validate().toInt()).then((value) {
        if (value != null) {
          pmpStore.setPmpMembership(levelId.validate());
          setRestrictions(levelId: levelId.validate());
          appStore.setFreeSubscription(isFreeSubscription);
          appStore.setLoading(false);
          if (isStartPurchase) PmpOrderDetailScreen(isFromCheckOutScreen: true, orderDetail: order).launch(context!);
        }
      }).catchError((e) {
        appStore.setLoading(false);
        toast(e.toString());
        log('Error: ${e.toString()}');
      });
    }).catchError((e) {
      appStore.setLoading(false);
      toast(e.toString());
    });
  }

  static Future<void> checkInAppCustomerInfo() async {
    CustomerInfo customerInfo = await Purchases.getCustomerInfo();
    if (customerInfo.activeSubscriptions.isNotEmpty) {
      log(subscriptionActivatedLog);
      log("${customerInfo.originalAppUserId} customer's Active subscription======>${customerInfo.activeSubscriptions}");
      if (customerInfo.entitlements.all[appStore.inAppEntitlementID] != null) subscriptionExpirationDate = customerInfo.entitlements.all[appStore.inAppEntitlementID]!.expirationDate.validate();
      appStore.setInAppActiveSubscription(customerInfo.activeSubscriptions.first);

      /// Updating new order in Database
      StoreProduct? activeSubscription = await getActiveSubscription();
      String? levelId = await getLevelID();
      String activeSubscriptionInDatabase = await checkUserSubscription();

      log("active subscription in revenue cat  ========>${activeSubscription?.identifier}");
      log("levelID========>${levelId.validate()}");
      log("active Subscription In Database========>${activeSubscriptionInDatabase}");

      // generate order if revenue cat and database  active identifier mismatch

      if (activeSubscription != null && activeSubscription.identifier != activeSubscriptionInDatabase) {
        Map request = {
          "billing_amount": activeSubscription.price.validate(),
          "gateway": "in_app_purchase",
          "payment_by": "Google_payment",
          "email": userStore.loginEmail,
          "contact": '',
          "meta_value": "",
          "level_id": levelId.validate(),
          "gateway_mode": "Google",
          "is_active_subscription": true,
          "In_app_purchase_identifier": activeSubscription.identifier.validate()
        };
        log('REQ: $request');

        /// Generating an order
        await generateOrder(request).then((order) async {
          await getMembershipLevelForUser(userId: userStore.loginUserId.validate().toInt()).then((value) {
            if (value != null) {
              pmpStore.setPmpMembership(levelId.validate());
              setRestrictions(levelId: levelId.validate());
              appStore.setLoading(false);
            }
          }).catchError((e) {
            appStore.setLoading(false);
            toast(e.toString());
            log('Error: ${e.toString()}');
          });
        }).catchError((e) {
          appStore.setLoading(false);
          toast(e.toString());
        });
      }
    } else {
      log(subscriptionDeactivatedLog);
      appStore.setInAppActiveSubscription("");
      if (pmpStore.pmpMembership != null && pmpStore.pmpMembership!.isNotEmpty && !appStore.isFreeSubscription) {
        appStore.setLoading(true);

        ///Canceling the current membership
        await cancelMembershipLevel(levelId: pmpStore.pmpMembership).then((value) async {
          pmpStore.pmpMembership = null;
          await setRestrictions();
          appStore.setLoading(false);
        }).catchError((e) {
          appStore.setLoading(false);
          toast(e.toString());
        });
      }
    }
  }

  static Future<StoreProduct?> getActiveSubscription() async {
    StoreProduct? activeSubscription;
    await getOfferings().then((value) async {
      if (value != null) {
        value.current!.availablePackages.forEach((element) {
          if (element.storeProduct.identifier == appStore.inAppActiveSubscription) {
            activeSubscription = element.storeProduct;
          }
        });
      }
    });
    return activeSubscription;
  }

  static Future<String> checkUserSubscription() async {
    String currentSubscription = "";
    MembershipModel? membership;

    await getMembershipLevelForUser(userId: userStore.loginUserId.validate().toInt()).then((value) async {
      if (value != null) {
        membership = MembershipModel.fromJson(value);
        if (isAndroid) {
          currentSubscription = membership!.inAppPurchaseGoogleIdentifier.validate();
        } else {
          currentSubscription = membership!.inAppPurchaseAppleIdentifier.validate();
        }
      }
    });

    return currentSubscription;
  }

  static Future<String?> getLevelID() async {
    String levelID = "";
    await getLevelsList().then((value) async {
      value.forEach(
        (element) {
          if (isAndroid) {
            if (element.inAppPurchaseGoogleIdentifier == appStore.inAppActiveSubscription) {
              levelID = element.id.validate();
            }
          } else {
            if (element.inAppPurchaseAppleIdentifier == appStore.inAppActiveSubscription) {
              levelID = element.id.validate();
            }
          }
        },
      );
    });

    return levelID;
  }

  static Future<void> cancelSubscription(BuildContext context) async {
    appStore.setLoading(true);
    CustomerInfo customerInfo = await Purchases.getCustomerInfo();
    if (customerInfo.managementURL != null) {
      await openWebPage(context, url: customerInfo.managementURL.validate());
    } else {
      toast(language.youDonTHaveAny);
      await checkInAppCustomerInfo();
      appStore.setLoading(false);
    }
  }

  static Future<void> restoreSubscription() async {
    Purchases.restorePurchases().then(
      (value) {
        checkInAppCustomerInfo();
      },
    );
  }
}
